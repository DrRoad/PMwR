%% \VignetteIndexEntry{Plotting quantities during trading hours}
\documentclass[a4paper,11pt]{article}
\usepackage[left = 3cm, top = 2cm, bottom = 2cm, right = 4cm]{geometry}
\usepackage[noae,nogin]{Sweave}
\usepackage{mathptmx}
\usepackage{amsmath,amstext}
\usepackage{hyperref}
\usepackage{natbib}

\SweaveOpts{keep.source = TRUE, eps = TRUE}

\begin{document}
\title{Plotting irregularly-spaced series during trading hours}
\author{Enrico Schumann\\\url{es@enricoschumann.net}}
\maketitle

<<echo=false>>=
require("PMwR")
@

\section{An example}

We are given these prices of the Bund future contract, traded at the
Eurex in Germany:%
\footnote{Note that I leave the time zone to the operating system.
  Since my computer is typically located in the time zone that the
  \texttt{tz database} calls `Europe/Berlin', the first time should be
  \texttt{2012-10-18 20:00:09}.  Suppose your computer was in
  `America/Chicago' and you recompiled this vignette.  Then the first
  time would become \texttt{2012-10-18 13:00:09}.  Which is right: it
  is the correct time, only translated into Chicago local time.} %

<<>>=
prices <- c(139.82, 139.82, 139.8, 139.81, 139.77, 139.85, 
            139.76, 139.76, 139.77, 139.8, 139.86, 140.46, 
            140.39, 140.14, 140.15)

times <- structure(c(1350583209, 1350583271, 1350583319, 
                     1350583289, 1350584209, 1350586249, 
                     1350588199, 1350589299, 1350590399, 
                     1350630970, 1350632971, 1350673969, 
                     1350675751, 1350888315, 1350889533), 
                   class = c("POSIXct", "POSIXt"), tzone = "")
data.frame(times, prices)
@

A \texttt{plot} of price against time looks like this.

<<fig=true, width = 5, height = 3.5>>=
plot(times, prices, type = "s")
@

Such a plot is fine for many purposes, but the contract for which we
have prices is only traded from Monday to Friday (not on weekends),
and only from 08:00 to 22:00 Europe/Berlin time.  So the plot should
omit those times at which no trading takes place.  This is what the
function \texttt{plotTradingHours} does.

<<fig=true, width = 5, height = 3.5>>=
tmp <- plotTradingHours(x = prices, t = times, 
                        interval = "1 sec", 
                        labels = "day",
                        fromHHMMSS = "080000", 
                        toHHMMSS = "220000",
                        type = "s")
@

What we need for such a plot is a function that maps actual time to a
point on the \mbox{$x$-scale}, while the \mbox{$y$-scale} stays
unchanged.  If we were talking only about days, not times, we needed
something like this: \medskip

\begin{tabular}{rrr}
  \emph{day} & \emph{$x$-position} & \emph{mapped $x$-position} \\
  Thursday   & 1                   & 1                          \\
  Friday     & 2                   & 2                          \\
  Saturday   & 3                   & \texttt{<removed>}         \\
  Sunday     & 4                   & \texttt{<removed>}         \\
  Monday     & 5                   & 3                          \\
\end{tabular}\medskip

This mapping is what \texttt{plotTradingHours} provides. And not much
more: the design goal of the function is to make it as much as
possible an ordinary plot; or more specifically, to make it as similar
as possible to the \texttt{plot} function. Indeed,
\texttt{plotTradingHours} calls \texttt{plot} with a small number of
default settings:
<<eval = FALSE>>=
list(type = "l", xaxt = "n", xlab = "", ylab = "")
@ 
These settings can all be overridden: \texttt{\ldots} arguments are
passed to \texttt{plot} (note that we already set \texttt{s} as the
plot's \texttt{type} in the last code chunk).  The only required
setting is suppressing the \mbox{$x$-axis} with \texttt{xaxt = "n"},
because \texttt{plotTradingHours} will create its own $x$-axis via a
call to \texttt{axis(1, \ldots)}.  In case you wish to use your own
axis specification, either set \texttt{do.plotAxis} to \texttt{FALSE}
or pass settings to \texttt{axis} through the argument
\texttt{axis1.par}.


\section{More examples}

Like \texttt{plot}, \texttt{plotTradingHours} is typically called for
its side effect: creating a plot.  But it also returns useful
information (invisibly, unless called with \texttt{do.plot = FALSE}).

<<>>=
str(tmp)
@ 
This information can be used to add elements to plots.

\subsection{Adding grid lines}

We can add grid lines with \texttt{abline}.  The $y$-axis poses no
special problem.  The positions of the $x$-axis ticks are returned
from \texttt{plotTradingHours}.

<<fig=true, width = 5, height = 3.5>>=
tmp <- plotTradingHours(x = prices, t = times, 
                        interval = "1 sec", 
                        labels = "day",
                        fromHHMMSS="080000", 
                        toHHMMSS = "220000",
                        type = "s")
abline(h = axTicks(2), v = tmp$axis.pos, 
       col = "lightgrey", lty = "dotted")
@ 

If we wan to add to a specific time, say 19 October, 13:10:23, we can
use the function \texttt{map} that the call to
\texttt{plotTradingHours} returns.  We first create the specific time
with, for example, \texttt{ISOdatetime} or \texttt{strptime}.

<<>>=
## Again, I do not specify a time zone since time zones depend on the 
## operating system. To reproduce the example, you may also use this
## representation:
## mytime <- structure(1350645023, 
##                     class = c("POSIXct", "POSIXt"), tzone = "")
##

mytime <- ISOdatetime(2012, 10, 19, 13, 10, 23)
mytime
@ 

Now we use \texttt{map} to translate this time into the appropriate
$x$-position.


<<fig=true, width = 5, height = 3.5>>=
tmp <- plotTradingHours(x = prices, t = times, 
                        interval = "1 sec", labels = "day",
                        fromHHMMSS="080000", 
                        toHHMMSS = "220000",
                        type = "s")
abline(h = axTicks(2), v = tmp$axis.pos, 
       col = "lightgrey", lty = "dotted")
abline(v = tmp$map(mytime)$t, col = "red")
@ 
The function \texttt{map} returns a list with two components,
\texttt{t} and \texttt{ix}.
<<>>=
tmp$map(mytime)
@ 
The first component is the appropriate position on the
\mbox{$x$-axis}; since it is a time it is called \texttt{t}.  The
second component gives the subscripts to values that should actually
be plotted. Example: suppose that, for whatever reason, we wish to
plot points at several prices at 21:00:00 for several days.

<<>>=
## moretimes <- structure(c(1350586800, 1350673200, 1350759600), 
##                        class = c("POSIXct", "POSIXt"), tzone = "")
##

moretimes <- ISOdatetime(2012, 10, 18:20, 21, 00, 00)
values <- seq(140, 140.20, length.out = length(moretimes))
data.frame(times = moretimes, 
           weekday = format(moretimes, "%A"), 
           values)
@ 
But 20 October 2012 falls on a Saturday, and so it does not appear in the plot. 
<<>>=
tmp$map(moretimes)
@ 
The values that should be plotted can conveniently be found by use
\texttt{ix}.
<<>>=
values[tmp$map(moretimes)$ix]
@


\newpage
\appendix
<<results=tex>>=
toLatex(sessionInfo())
@ 
\end{document}
